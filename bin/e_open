#! /usr/bin/env python
# -*- encoding: utf-8; -*-

import sys, os, subprocess, re

#os.environ['TMPDIR'] = '/tmp'

def url(data):
    if data.startswith('http:') or data.startswith('https:') or data.startswith('mailto:') or data.endswith('.html') or data.endswith('.htm') or data.endswith('.xhtml'):
        cmd = ["open", data]
    else:
        cmd = None
    return cmd

def python_stack_trace(data):
    m = re.search(r'[\s"]*File "([^"]+)", line (\d+)', data.replace('\\', ''))
    if m:
        filename = m.group(1).replace('/home/eu/AcmacsWeb.app/Contents/Resources/acmacs/', '/Users/eu/ac/acmacs/acmacs/').replace('/home/eu/', '/Users/eu/')
        if filename.startswith('./'):
            filename = '/Users/eu/ac/acmacs/' + filename[2:]
        cmd = ["emacsclient", "-n", "+" + m.group(2), filename]
    else:
        cmd = None
    return cmd

def python_log(data):
    cmd = None
    m = re.match(r'.*\[(?:acmacs\.)?(acmacs\.[A-Za-z0-9\._]+)\s+(\d+)\]', data)
    if m:
        for prefix in ('/Users/eu/ac/acmacs/', '/Users/eu/ac/acmacs-b/b1', '/Users/eu/ac/acmacs-b/b3'):
            for infix in ('/'.join(m.group(1).split('.')[:-1]), '/'.join(m.group(1).split('.'))):
                filename = prefix + infix + '.py'
                if os.path.isfile(filename):
                    cmd = ["emacsclient", "-n", "+" + m.group(2), filename]
                    break
            if cmd:
                break
    return cmd

def perl_stack_trace(data):
    m = re.match(r'^.+\s+at\s+(.+)\s+line\s+(\d+)', data)
    if m:
        cmd = ["emacsclient", "-n", "+" + m.group(2), m.group(1)]
    else:
        cmd = None
    return cmd

def gcc_error_message(data):
    m = re.match(r'^(/.+):(\d+)', data)
    if m:
        cmd = ["emacsclient", "-n", "+" + m.group(2), m.group(1)]
    else:
        cmd = None
    return cmd

# def excel(data):
#     name = os.path.expanduser(os.path.expandvars(data.strip()))
#     if os.path.exists(name) and (name.endswith('.xls') or name.endswith('.xlsx') or name.endswith('.doc') or name.endswith('.docx')):
#         cmd = ["open", name]
#     else:
#         cmd = None
#     return cmd

def apple_open(data):
    name = os.path.expanduser(os.path.expandvars(data.strip()))
    if name[-1] == ':':
        name = name[:-1]
    while (name.startswith("'") and name.endswith("'")) or (name.startswith('"') and name.endswith('"')) or (name.startswith('[') and name.endswith(']')) or (name.startswith('(') and name.endswith(')')):
        name = name[1:-1]
    if os.path.exists(name) and re.compile(r'\.(xlsx?|docx?|pptx?|pdf|html?|jpe?g|png|avi|mkv)$', re.I).search(name):
        cmd = ["open", name]
    else:
        cmd = None
    return cmd

def filename(name):
    name = name.strip()
    while (name.startswith("'") and name.endswith("'")) or (name.startswith('"') and name.endswith('"')) or (name.startswith('[') and name.endswith(']')) or (name.startswith('(') and name.endswith(')')):
        name = name[1:-1]
    line_no = None
    m = re.match(r'^/?([A-Za-z0-9\.]+:.+)', name) # remote filename
    if m:
        if name[:5] not in ('/scp:', '/ssh:'):
            name = '/scp:' + m.group(1)
    else:
        m = re.match(r'([^:]+):(\d+)?$', name) # filename and line_no (perhaps empty for iTerm2 support)
        #print >>sys.stderr, name, m and m.groups()
        if m:
            name, line_no = m.groups()
    if options.host:
        name = '/scp:' + options.host + ':' + name
    if os.path.exists(name) or name[:5] == '/scp:':
        if line_no is not None:
            cmd = ["emacsclient", "-n", "+" + line_no, name]
        else:
            cmd = ["emacsclient", "-n", name]
    else:
        cmd = None
    return cmd

# ======================================================================

if "/usr/local/bin" not in os.environ['PATH']:
    os.environ['PATH'] = "/usr/local/bin:/opt/local/bin:" + os.environ['PATH']

# print >>sys.stderr, sys.argv
import optparse
parser = optparse.OptionParser(usage='%prog [options] filename')
parser.add_option("--host", dest="host", default=None)
(options, args) = parser.parse_args()
if args:
    for name in args:
        m = re.match(r'^[\'"]\s*(.+)\s*[\'"]', name)
        if m:
            name = m.group(1)
        name = os.path.expanduser(os.path.expandvars(name))
        cmd = url(name) or python_stack_trace(name) or python_log(name) or perl_stack_trace(name) or gcc_error_message(name) or apple_open(name) or filename(name)
        if cmd is None:
            #cmd  = ["say", "command not recognized"]
            cmd  = ["say", "-v", "Milena", u"нах"]
            #cmd  = ["growlnotify", "-n", sys.argv[0], "-m", "Unrecognized file name: " + name]
            #cmd  = ["growlnotify", "-m", "Unrecognized file name: " + name]
            #raise RuntimeError('name not recognized: ' + name)
        #subprocess.Popen(['osascript', '-e', 'tell app "Emacs" to activate']).communicate()
        # print >>sys.stderr, cmd
        subprocess.Popen(cmd).communicate()
else:
    parser.print_help()
    exit(1)
